{
  "hash": "17b33ed1fc9a0945c337b1bed2e8dd93",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Data Pipelines with Targets\"\ndescription: \"An R package for creating reproducible workflows \"\nauthor:\n  - name: Raymond Hunter \n    url: <https://ramhunte.github.io/\ndate: 7-10-2025\n# bibliography: references.bib\ncitation: \n  url: <https://ramhunte.github.io/blogs/targets_wflow/\n# image: copepod.jpg\ncategories: [Reproducible Pipelines] # self-defined categories\nformat: \n  html: \n    # code-fold: show \n    code-copy: true \n    code-summary: \"code\" \n    code-line-numbers: false \n    code-tools: true \n    code-block-border-left: true\n    # embed-resources: true\n    warning: false\n    message: false\ntoc: true\ndraft: false # setting this to `true` will prevent your post from appearing on your listing page until you're ready!\n---\n\n\n\nIf you are reading this post, you are probably familiar with the process of collecting, cleaning, wrangling, and analyzing data and maybe writing it up in a report. You are also probably familiar with the feeling of finding an error (or getting critical feedback on things to change from your supervisor) at the finish line and having to go aaalllllll the way back and re-run your time and energy intensive workflow. Even worse, your pipeline has gotten so large and messy over the corrections you don't exactly remember which pieces of code are still relevant making the process even more painful. Rinse and repeat. It is not a fun process! It's what the package developers call a *Sysyphean loop*. That is precious time that you could be spending on enjoying life. Fortunately there is an R package for shrinking this death loop and making your job as an analyst/developer/scientist/etc. much more enjoyable, and it is called `{targets}`\n\n<br>\n\n## What is `{targets}`?\n\nTargets is an R package that helps organize, structure, and track components throughout your analytical pipeline making it more *reproducible*, *scalable*, and *robust*. It monitors the code and outputs of various steps (or targets) in you your workflow to make sure they stay up-to-date if something changes, but more importantly, to not rerun these steps if they have not changed. It speeds up your analysis by only running code that has been changed (and all of its downstream dependencies). `{targets}` also flags code that has been changed and not run so you know exactly where in your hideously long pipeline you need to pay attention to. Using targets pushes us to make efficient, clean, and function-oriented code that has a slightly higher initial cost but orders of magnitude greater returns in time and energy saved.\n\n<br>\n\n## Example\n\nFist, lets run through a simple analysis using `{palmerpenguins}` data without using targets:\n\n<br>\n\n### Set Up\n\nWe start by installing and loading the necessary packages and reading in the data.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# install packages \n# install.packages(c(\"palmerpenguins\", \"janitor\", \"tidyverse\", \"targets\"))\n\n# load packages\nlibrary(\"palmerpenguins\") # prenuin data \nlibrary(\"janitor\") # cleaning column names\nlibrary(\"tidyverse\") # collection of data processing packages\nlibrary(\"targets\")\n\n# read data\npenguins <- palmerpenguins::penguins\n```\n:::\n\n::: {.cell}\n\n:::\n\n\n\n### Wrangling data\n\nIt's critical to clean up and inspect the data prior to analysis. Fortunately for this basic example, `palmerpenguins` data is relatively clean already\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins_mod <- penguins |> # raw data\n  janitor::clean_names() |> # lower case columns\n  mutate(name = stringr::word(species, 1)) |>   # species name column\n  dplyr::select(name, island, flipper_length_mm, body_mass_g, bill_length_mm, sex)\n```\n:::\n\n\n\n### Exploratory data analysis\n\nBefore conducting any analysis, its critical to thoroughly check the quality of the data and assumptions being made. There is no single way on how to perform *exploratory data analysis* as it is subjective to the data in hand and the question being asked. Although not thorough, we will inspect a possible linear relationship between body mass and flipper length by species\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# visualizing relationship of body mass and flipper length of penguins\nggplot(data = penguins_mod,\n       aes(x = body_mass_g, y = flipper_length_mm, color = name)) + \n  geom_point() + # add data points\n  geom_smooth(method = \"lm\", se = FALSE) +  # Add trend lines for each species\n  labs(\n    y = \"Flipper Length (mm)\",\n    x = \"Body Mass (g)\",\n    title = \"Penguin Body Mass by Flipper Length\",\n    color = \"Species\"        \n  ) +\n  scale_color_manual( # changing colors \n    values = c(\n      \"Adelie\" = \"blue4\", \n      \"Chinstrap\" = \"tan\",     \n      \"Gentoo\" = \"darkgreen\"   \n    )) +\n  theme_minimal() # minimal appearance\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n\n<br>\n\n### Modeling\n\nYou then may go on to fit a variety of different models depending on your data. Here, we choose a simple ordinary least squares linear regression model to see how body mass, species type, and sex influence relate to the flipper length of penguins.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# creating a model \nm1 <- lm(flipper_length_mm ~ body_mass_g + name + sex, \n         data = penguins_mod)\n```\n:::\n\n\n\n<br>\n\n### Results\n\nYou may then go on to evaluate and compare the results of your model. We create a simple summary coefficients table and inspect the R squared value.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# model coefficients \nsummary(m1)$coefficients |> \n  as.data.frame() |> \n  knitr::kable()\n```\n\n::: {.cell-output-display}\n\n\n|              |    Estimate| Std. Error|   t value| Pr(>&#124;t&#124;)|\n|:-------------|-----------:|----------:|---------:|------------------:|\n|(Intercept)   | 164.5887169|  3.1836146| 51.698694|          0.0000000|\n|body_mass_g   |   0.0065499|  0.0009308|  7.036742|          0.0000000|\n|nameChinstrap |   5.5444400|  0.7852051|  7.061136|          0.0000000|\n|nameGentoo    |  18.0213174|  1.4424942| 12.493165|          0.0000000|\n|sexmale       |   2.4777215|  0.8540581|  2.901116|          0.0039696|\n\n\n:::\n\n```{.r .cell-code}\n# model r squared \nsummary(m1)$r.squared\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.8562944\n```\n\n\n:::\n:::\n\n\n\nAnd there you have it! A very simple analysis of penguin data in R. Not too complicated, right? Why do we need to use `targets`? Well, imagine your supervisor asks you to investigate 3 different hypotheses with significantly more data using a suite of various machine learning models to see which one predicts the best. Your exploratory data analysis is much more exhaustive, your models take minutes, hours, or even days to run, and your scripts have become painfully hard to keep track of. On top of that, you are expected to write a report which you know will be scrutinized and returned for edits which will require you to re-run the whole process over again.\n\n<br>\n\n## Using {targets}\n\nLets run through our pipeline again but applying targets this time.\n\n### 1 Function-orient your workflow\n\nProgramming best practices involves breaking up your workflow into individual, customized functions that can be recycled, modified, and scaled easily with significantly less effort than copying and pasting code. In your root directory (the folder where your code is stored) you need to make a folder called `R` that will hold a script called `functions.R`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndir.create(\"R\") # creating an R folder in your working directory\n\nfile.create(\"R/functions.R\") # adding a functions script \n```\n:::\n\n\n\nonce inside this `functions.R` script, we will translate our original pipeline into individual functions\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# get_data function\npull_data <- function() {\n  return(palmerpenguins::penguins)\n  }\n\n\n# cleaning and wrangling data\nclean_data <- function(data) {\n  data |> # raw data\n    janitor::clean_names() |> # lower case columns\n    mutate(name = stringr::word(species, 1)) |>   # species name column\n    dplyr::select(name, island, flipper_length_mm, body_mass_g, sex) # selecting variables\n}\n\n\n# plot data\nplot_data <- function(data) {\n  ggplot(data = data, \n         aes(x = body_mass_g, y = flipper_length_mm, color = name)) + \n  geom_point() + # add data points\n  geom_smooth(method = \"lm\", se = FALSE) +  # Add trend lines for each species\n  labs(\n    y = \"Flipper Length (mm)\",\n    x = \"Body Mass (g)\",\n    title = \"Penguin Body Mass by Flipper Length\",\n    color = \"Species\"        \n  ) +\n  scale_color_manual( # changing colors \n    values = c(\n      \"Adelie\" = \"blue4\", \n      \"Chinstrap\" = \"tan\",     \n      \"Gentoo\" = \"darkgreen\"   \n    )) +\n  theme_minimal() # minimal appearance\n}\n\n\n# fit model\nfit_model <- function(data) {\n  lm(flipper_length_mm ~ body_mass_g + name + sex, data)\n}\n\n\n# model coefficients \nmodel_coefs <- function(model) {\n  summary(model)$coefficients |> \n    as.data.frame() |> \n    knitr::kable()\n}\n\n\n# model r squared \nmodel_r2 <- function(model) {\n  summary(model)$r.squared\n}\n```\n:::\n\n\n\n### 2 Create the `targets` skeleton\n\nNow that our workflow is neatly packaged into individual functions it is time to create the backbone of our pipeline, a `_targets.R` scrip. You first need to run `install.packages(\"targets\")` if you don't have it installed yet. Next, run `targets::use_targets()` which will create a `_targets.R` script in your working directory. This file will be populated with comments on what to include many of which is irrelevant or optional for this example. make sure to delete the example targets code provided in the file as well. You should fill the file as such:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# _targets.R file\n# Load packages required to define the pipeline:\nlibrary(targets)\n\n# Run the R scripts in the R/ folder with your custom functions:\ntar_source()\n\n# Set target options:\ntar_option_set(packages = c(\"palmerpenguins\", \"janitor\", \"tidyverse\")) # load packages\n\n# here is where we define our targets using our custom functions\nlist(\n  tar_target(data, pull_data()), \n  tar_target(data_c, clean_data(data)),\n  tar_target(plot, plot_data(data_c)),\n  tar_target(model, fit_model(data_c)),\n  tar_target(coefs, model_coefs(model)),\n  tar_target(r2, model_r2(model))\n)\n```\n:::\n\n\n\nIt can get a little bit confusing, so we will take it slow. First, we call the targets (`library(targets)`) package so the targets functions can run. Next, we call all the fucntions we defined in our `R/functions.R` script by calling `tar_source()`. We then need to load all the packages that are required for those functions themselves to run by using `tar_option_set`. Lastly, we define our targets options using `list` with individual `tar_target()` calls inside that specify each target. The first part inside the `tar_target()` function is the name we are assigning the target object. The second part is the function we wrote that we are using to create the target along with any required upstream targets being used as inputs inside the function.\n\nConfused? It's ok, it's confusing. Let's look take a closer look at our first target. Inside of `tar_target(data, data_pull())`, we are telling R to create a targets option called `data`. The data target is created from the `data_pull()` function we wrote earlier which returns the palmer penguins dataset. Next, we create a targets object called `data_c` (for clean data), this target is created by using the `clean_data` function we write earlier **using our new target called `data`** as the input for the function. So we just used a target inside of a function to create a new target. Cool, right? This process repeats for subsequent targets as well\n\n### Running targets\n\nLets look at our targets pipeline\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# visualize targets pipeline\ntargets::tar_visnetwork()\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"visNetwork html-widget html-fill-item\" id=\"htmlwidget-9350592b683b9993a382\" style=\"width:100%;height:464px;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-9350592b683b9993a382\">{\"x\":{\"nodes\":{\"name\":[\"clean_data\",\"coefs\",\"data\",\"data_c\",\"fit_model\",\"model\",\"model_coefs\",\"model_r2\",\"plot\",\"plot_data\",\"pull_data\",\"r2\"],\"type\":[\"function\",\"stem\",\"stem\",\"stem\",\"function\",\"stem\",\"function\",\"function\",\"stem\",\"function\",\"function\",\"stem\"],\"description\":[null,null,null,null,null,null,null,null,null,null,null,null],\"status\":[\"outdated\",\"outdated\",\"outdated\",\"outdated\",\"outdated\",\"outdated\",\"outdated\",\"outdated\",\"outdated\",\"outdated\",\"outdated\",\"outdated\"],\"seconds\":[null,null,null,null,null,null,null,null,null,null,null,null],\"bytes\":[null,null,null,null,null,null,null,null,null,null,null,null],\"branches\":[null,null,null,null,null,null,null,null,null,null,null,null],\"label\":[\"clean_data\",\"coefs\",\"data\",\"data_c\",\"fit_model\",\"model\",\"model_coefs\",\"model_r2\",\"plot\",\"plot_data\",\"pull_data\",\"r2\"],\"color\":[\"#78B7C5\",\"#78B7C5\",\"#78B7C5\",\"#78B7C5\",\"#78B7C5\",\"#78B7C5\",\"#78B7C5\",\"#78B7C5\",\"#78B7C5\",\"#78B7C5\",\"#78B7C5\",\"#78B7C5\"],\"id\":[\"clean_data\",\"coefs\",\"data\",\"data_c\",\"fit_model\",\"model\",\"model_coefs\",\"model_r2\",\"plot\",\"plot_data\",\"pull_data\",\"r2\"],\"level\":[1,5,2,3,1,4,1,1,4,1,1,5],\"shape\":[\"triangle\",\"dot\",\"dot\",\"dot\",\"triangle\",\"dot\",\"triangle\",\"triangle\",\"dot\",\"triangle\",\"triangle\",\"dot\"]},\"edges\":{\"from\":[\"model\",\"model_coefs\",\"pull_data\",\"clean_data\",\"data\",\"data_c\",\"fit_model\",\"data_c\",\"plot_data\",\"model_r2\",\"model\"],\"to\":[\"coefs\",\"coefs\",\"data\",\"data_c\",\"data_c\",\"model\",\"model\",\"plot\",\"plot\",\"r2\",\"r2\"],\"color\":[\"#78B7C5\",\"#78B7C5\",\"#78B7C5\",\"#78B7C5\",\"#78B7C5\",\"#78B7C5\",\"#78B7C5\",\"#78B7C5\",\"#78B7C5\",\"#78B7C5\",\"#78B7C5\"],\"arrows\":[\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\"]},\"nodesToDataframe\":true,\"edgesToDataframe\":true,\"options\":{\"width\":\"100%\",\"height\":\"100%\",\"nodes\":{\"shape\":\"dot\",\"physics\":false},\"manipulation\":{\"enabled\":false},\"edges\":{\"smooth\":{\"type\":\"cubicBezier\",\"forceDirection\":\"horizontal\"}},\"physics\":{\"stabilization\":false},\"interaction\":{\"zoomSpeed\":1},\"layout\":{\"hierarchical\":{\"enabled\":true,\"levelSeparation\":180,\"direction\":\"LR\"}}},\"groups\":null,\"width\":null,\"height\":null,\"idselection\":{\"enabled\":false,\"style\":\"width: 150px; height: 26px\",\"useLabels\":true,\"main\":\"Select by id\"},\"byselection\":{\"enabled\":false,\"style\":\"width: 150px; height: 26px\",\"multiple\":false,\"hideColor\":\"rgba(200,200,200,0.5)\",\"highlight\":false},\"main\":{\"text\":\"\",\"style\":\"font-family:Georgia, Times New Roman, Times, serif;font-weight:bold;font-size:20px;text-align:center;\"},\"submain\":null,\"footer\":null,\"background\":\"rgba(0, 0, 0, 0)\",\"highlight\":{\"enabled\":true,\"hoverNearest\":false,\"degree\":{\"from\":1,\"to\":1},\"algorithm\":\"hierarchical\",\"hideColor\":\"rgba(200,200,200,0.5)\",\"labelOnly\":true},\"collapse\":{\"enabled\":true,\"fit\":false,\"resetHighlight\":true,\"clusterOptions\":null,\"keepCoord\":true,\"labelSuffix\":\"(cluster)\"},\"legend\":{\"width\":0.2,\"useGroups\":false,\"position\":\"right\",\"ncol\":1,\"stepX\":100,\"stepY\":100,\"zoom\":true,\"nodes\":{\"label\":[\"Outdated\",\"Function\",\"Stem\"],\"color\":[\"#78B7C5\",\"#899DA4\",\"#899DA4\"],\"shape\":[\"dot\",\"triangle\",\"dot\"]},\"nodesToDataframe\":true},\"tooltipStay\":300,\"tooltipStyle\":\"position: fixed;visibility:hidden;padding: 5px;white-space: nowrap;font-family: verdana;font-size:14px;font-color:#000000;background-color: #f5f4ed;-moz-border-radius: 3px;-webkit-border-radius: 3px;border-radius: 3px;border: 1px solid #808074;box-shadow: 3px 3px 10px rgba(0, 0, 0, 0.2);\"},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n:::\n:::\n\n\n\nNot only does targets track dependencies across your pipeline, but it allows you to visualize them and also see which ones are related and outdated. Functions used to create the targets are shown as triangles, and the targets themselves are shown as circles. If functions or targets are linked with an arrow then they are related to one another. When a target is outdated (blue in this case), it means that there have been changes to its code directly or one of its upstream relatives. This should be the case for downstream dependencies as well. Let's go ahead and update our targets (run our pipeline) by calling `tar_make()`. We then call `tar_visunetwork()` to see the results:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntar_make() # updating and running our targets objects\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n+ data dispatched\n\nAttaching package: 'palmerpenguins'\n\nThe following objects are masked from 'package:datasets':\n\n    penguins, penguins_raw\n\n\nAttaching package: 'janitor'\n\nThe following objects are masked from 'package:stats':\n\n    chisq.test, fisher.test\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.2     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.4     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n✔ data completed [560ms, 2.92 kB]\n+ data_c dispatched\n✔ data_c completed [60ms, 2.28 kB]\n+ model dispatched\n✔ model completed [0ms, 16.64 kB]\n+ plot dispatched\n✔ plot completed [10ms, 132.51 kB]\n+ r2 dispatched\n✔ r2 completed [0ms, 53 B]\n+ coefs dispatched\n✔ coefs completed [20ms, 357 B]\n✔ ended pipeline [1.1s, 6 completed, 0 skipped]\nWarning messages:\n1: package 'palmerpenguins' was built under R version 4.5.1 \n2: 1 targets produced warnings. Run targets::tar_meta(fields = warnings, complete_only = TRUE) for the messages. \n```\n\n\n:::\n\n```{.r .cell-code}\ntar_visnetwork() # visualizing targets \n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"visNetwork html-widget html-fill-item\" id=\"htmlwidget-71fe615df317991ec201\" style=\"width:100%;height:464px;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-71fe615df317991ec201\">{\"x\":{\"nodes\":{\"name\":[\"clean_data\",\"coefs\",\"data\",\"data_c\",\"fit_model\",\"model\",\"model_coefs\",\"model_r2\",\"plot\",\"plot_data\",\"pull_data\",\"r2\"],\"type\":[\"function\",\"stem\",\"stem\",\"stem\",\"function\",\"stem\",\"function\",\"function\",\"stem\",\"function\",\"function\",\"stem\"],\"description\":[null,null,null,null,null,null,null,null,null,null,null,null],\"status\":[\"uptodate\",\"uptodate\",\"uptodate\",\"uptodate\",\"uptodate\",\"uptodate\",\"uptodate\",\"uptodate\",\"uptodate\",\"uptodate\",\"uptodate\",\"uptodate\"],\"seconds\":[null,0.02,0.5600000000000001,0.06,null,0,null,null,0.01,null,null,0],\"bytes\":[null,357,2915,2279,null,16642,null,null,132513,null,null,53],\"branches\":[null,null,null,null,null,null,null,null,null,null,null,null],\"label\":[\"clean_data\",\"coefs\",\"data\",\"data_c\",\"fit_model\",\"model\",\"model_coefs\",\"model_r2\",\"plot\",\"plot_data\",\"pull_data\",\"r2\"],\"color\":[\"#354823\",\"#354823\",\"#354823\",\"#354823\",\"#354823\",\"#354823\",\"#354823\",\"#354823\",\"#354823\",\"#354823\",\"#354823\",\"#354823\"],\"id\":[\"clean_data\",\"coefs\",\"data\",\"data_c\",\"fit_model\",\"model\",\"model_coefs\",\"model_r2\",\"plot\",\"plot_data\",\"pull_data\",\"r2\"],\"level\":[1,5,2,3,1,4,1,1,4,1,1,5],\"shape\":[\"triangle\",\"dot\",\"dot\",\"dot\",\"triangle\",\"dot\",\"triangle\",\"triangle\",\"dot\",\"triangle\",\"triangle\",\"dot\"]},\"edges\":{\"from\":[\"model\",\"model_coefs\",\"pull_data\",\"clean_data\",\"data\",\"data_c\",\"fit_model\",\"data_c\",\"plot_data\",\"model_r2\",\"model\"],\"to\":[\"coefs\",\"coefs\",\"data\",\"data_c\",\"data_c\",\"model\",\"model\",\"plot\",\"plot\",\"r2\",\"r2\"],\"color\":[\"#354823\",\"#354823\",\"#354823\",\"#354823\",\"#354823\",\"#354823\",\"#354823\",\"#354823\",\"#354823\",\"#354823\",\"#354823\"],\"arrows\":[\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\"]},\"nodesToDataframe\":true,\"edgesToDataframe\":true,\"options\":{\"width\":\"100%\",\"height\":\"100%\",\"nodes\":{\"shape\":\"dot\",\"physics\":false},\"manipulation\":{\"enabled\":false},\"edges\":{\"smooth\":{\"type\":\"cubicBezier\",\"forceDirection\":\"horizontal\"}},\"physics\":{\"stabilization\":false},\"interaction\":{\"zoomSpeed\":1},\"layout\":{\"hierarchical\":{\"enabled\":true,\"levelSeparation\":180,\"direction\":\"LR\"}}},\"groups\":null,\"width\":null,\"height\":null,\"idselection\":{\"enabled\":false,\"style\":\"width: 150px; height: 26px\",\"useLabels\":true,\"main\":\"Select by id\"},\"byselection\":{\"enabled\":false,\"style\":\"width: 150px; height: 26px\",\"multiple\":false,\"hideColor\":\"rgba(200,200,200,0.5)\",\"highlight\":false},\"main\":{\"text\":\"\",\"style\":\"font-family:Georgia, Times New Roman, Times, serif;font-weight:bold;font-size:20px;text-align:center;\"},\"submain\":null,\"footer\":null,\"background\":\"rgba(0, 0, 0, 0)\",\"highlight\":{\"enabled\":true,\"hoverNearest\":false,\"degree\":{\"from\":1,\"to\":1},\"algorithm\":\"hierarchical\",\"hideColor\":\"rgba(200,200,200,0.5)\",\"labelOnly\":true},\"collapse\":{\"enabled\":true,\"fit\":false,\"resetHighlight\":true,\"clusterOptions\":null,\"keepCoord\":true,\"labelSuffix\":\"(cluster)\"},\"legend\":{\"width\":0.2,\"useGroups\":false,\"position\":\"right\",\"ncol\":1,\"stepX\":100,\"stepY\":100,\"zoom\":true,\"nodes\":{\"label\":[\"Up to date\",\"Function\",\"Stem\"],\"color\":[\"#354823\",\"#899DA4\",\"#899DA4\"],\"shape\":[\"dot\",\"triangle\",\"dot\"]},\"nodesToDataframe\":true},\"tooltipStay\":300,\"tooltipStyle\":\"position: fixed;visibility:hidden;padding: 5px;white-space: nowrap;font-family: verdana;font-size:14px;font-color:#000000;background-color: #f5f4ed;-moz-border-radius: 3px;-webkit-border-radius: 3px;border-radius: 3px;border: 1px solid #808074;box-shadow: 3px 3px 10px rgba(0, 0, 0, 0.2);\"},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n:::\n:::\n\n\n\nSo now all of the targets objects, or pieces of the pipeline, are up to date and reflected in the visual network. To test it out, try running `tar_make()` again and see what happens. It should read \"skipped pipeline\" as everything is up to date!\n\nEach target is stored as an R-like object within targets. You will notice they don't show up in your environment like true R objects do. To access this, we can go ahead and run the following to load our desired target object into our environment. If writing a report, I have a separate qmd report file in the same directory as my `_targets.R` script that I load necessary targets objects into by using `tar_load()`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntar_load(data) # load the target data\ntar_load(plot) # load the target plot\ntar_load(coefs) # load the target model coefficients table\n```\n:::\n\n\n\nSo you ran your entire workflow using targets and \"Hey, i thought I asked you to put bill length as one of the model predictors in there. Can you go back and add that in there?\" This would not be a big deal with such a small analysis such as this one. But, as you know, your analysis can become very large and difficult to track, re-run, and validate if not strucutred well. So lets test out what this looks like here.\n\nLets go back into our `functions.R` script and add in bill length as a feature\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# fit model with bill length\nfit_model <- function(data) {\n  lm(flipper_length_mm ~ body_mass_g + name + sex + bill_length_mm, data)\n}\n```\n:::\n\n::: {.cell}\n\n:::\n\n\n\nLets check and see how our pipeline has changed\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# visualize outdated targets objects\ntar_visnetwork()\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"visNetwork html-widget html-fill-item\" id=\"htmlwidget-9b249e13cc485d7b25bd\" style=\"width:100%;height:464px;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-9b249e13cc485d7b25bd\">{\"x\":{\"nodes\":{\"name\":[\"clean_data\",\"coefs\",\"data\",\"data_c\",\"fit_model\",\"model\",\"model_coefs\",\"model_r2\",\"plot\",\"plot_data\",\"pull_data\",\"r2\"],\"type\":[\"function\",\"stem\",\"stem\",\"stem\",\"function\",\"stem\",\"function\",\"function\",\"stem\",\"function\",\"function\",\"stem\"],\"description\":[null,null,null,null,null,null,null,null,null,null,null,null],\"status\":[\"uptodate\",\"outdated\",\"uptodate\",\"uptodate\",\"outdated\",\"outdated\",\"uptodate\",\"uptodate\",\"uptodate\",\"uptodate\",\"uptodate\",\"outdated\"],\"seconds\":[null,0.02,0.5600000000000001,0.06,null,0,null,null,0.01,null,null,0],\"bytes\":[null,357,2915,2279,null,16642,null,null,132513,null,null,53],\"branches\":[null,null,null,null,null,null,null,null,null,null,null,null],\"label\":[\"clean_data\",\"coefs\",\"data\",\"data_c\",\"fit_model\",\"model\",\"model_coefs\",\"model_r2\",\"plot\",\"plot_data\",\"pull_data\",\"r2\"],\"color\":[\"#354823\",\"#78B7C5\",\"#354823\",\"#354823\",\"#78B7C5\",\"#78B7C5\",\"#354823\",\"#354823\",\"#354823\",\"#354823\",\"#354823\",\"#78B7C5\"],\"id\":[\"clean_data\",\"coefs\",\"data\",\"data_c\",\"fit_model\",\"model\",\"model_coefs\",\"model_r2\",\"plot\",\"plot_data\",\"pull_data\",\"r2\"],\"level\":[1,5,2,3,1,4,1,1,4,1,1,5],\"shape\":[\"triangle\",\"dot\",\"dot\",\"dot\",\"triangle\",\"dot\",\"triangle\",\"triangle\",\"dot\",\"triangle\",\"triangle\",\"dot\"]},\"edges\":{\"from\":[\"model\",\"model_coefs\",\"pull_data\",\"clean_data\",\"data\",\"data_c\",\"fit_model\",\"data_c\",\"plot_data\",\"model_r2\",\"model\"],\"to\":[\"coefs\",\"coefs\",\"data\",\"data_c\",\"data_c\",\"model\",\"model\",\"plot\",\"plot\",\"r2\",\"r2\"],\"color\":[\"#78B7C5\",\"#78B7C5\",\"#354823\",\"#354823\",\"#354823\",\"#78B7C5\",\"#78B7C5\",\"#354823\",\"#354823\",\"#78B7C5\",\"#78B7C5\"],\"arrows\":[\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\"]},\"nodesToDataframe\":true,\"edgesToDataframe\":true,\"options\":{\"width\":\"100%\",\"height\":\"100%\",\"nodes\":{\"shape\":\"dot\",\"physics\":false},\"manipulation\":{\"enabled\":false},\"edges\":{\"smooth\":{\"type\":\"cubicBezier\",\"forceDirection\":\"horizontal\"}},\"physics\":{\"stabilization\":false},\"interaction\":{\"zoomSpeed\":1},\"layout\":{\"hierarchical\":{\"enabled\":true,\"levelSeparation\":180,\"direction\":\"LR\"}}},\"groups\":null,\"width\":null,\"height\":null,\"idselection\":{\"enabled\":false,\"style\":\"width: 150px; height: 26px\",\"useLabels\":true,\"main\":\"Select by id\"},\"byselection\":{\"enabled\":false,\"style\":\"width: 150px; height: 26px\",\"multiple\":false,\"hideColor\":\"rgba(200,200,200,0.5)\",\"highlight\":false},\"main\":{\"text\":\"\",\"style\":\"font-family:Georgia, Times New Roman, Times, serif;font-weight:bold;font-size:20px;text-align:center;\"},\"submain\":null,\"footer\":null,\"background\":\"rgba(0, 0, 0, 0)\",\"highlight\":{\"enabled\":true,\"hoverNearest\":false,\"degree\":{\"from\":1,\"to\":1},\"algorithm\":\"hierarchical\",\"hideColor\":\"rgba(200,200,200,0.5)\",\"labelOnly\":true},\"collapse\":{\"enabled\":true,\"fit\":false,\"resetHighlight\":true,\"clusterOptions\":null,\"keepCoord\":true,\"labelSuffix\":\"(cluster)\"},\"legend\":{\"width\":0.2,\"useGroups\":false,\"position\":\"right\",\"ncol\":1,\"stepX\":100,\"stepY\":100,\"zoom\":true,\"nodes\":{\"label\":[\"Up to date\",\"Outdated\",\"Function\",\"Stem\"],\"color\":[\"#354823\",\"#78B7C5\",\"#899DA4\",\"#899DA4\"],\"shape\":[\"dot\",\"dot\",\"triangle\",\"dot\"]},\"nodesToDataframe\":true},\"tooltipStay\":300,\"tooltipStyle\":\"position: fixed;visibility:hidden;padding: 5px;white-space: nowrap;font-family: verdana;font-size:14px;font-color:#000000;background-color: #f5f4ed;-moz-border-radius: 3px;-webkit-border-radius: 3px;border-radius: 3px;border: 1px solid #808074;box-shadow: 3px 3px 10px rgba(0, 0, 0, 0.2);\"},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n:::\n:::\n\n\n\nWe can see that the `fit_model()` function became outdated (blue color) after we changed its code and saved the file. Consequently, all downstream targets are now outdated too. You can see that `model`, `coefs`, and `r2` all are dependencies of our function. All other functions and targets that are not related to `fit_model()` remain unchanged as seen by their green color. To fix this, we need to update our pipeline\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# re-running our pipeline's outdated objects\ntar_make()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n+ model dispatched\n\nAttaching package: 'palmerpenguins'\n\nThe following objects are masked from 'package:datasets':\n\n    penguins, penguins_raw\n\n\nAttaching package: 'janitor'\n\nThe following objects are masked from 'package:stats':\n\n    chisq.test, fisher.test\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.2     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.4     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n✔ model completed [0ms, 20.85 kB]\n+ r2 dispatched\n✔ r2 completed [0ms, 54 B]\n+ coefs dispatched\n✔ coefs completed [0ms, 402 B]\n✔ ended pipeline [5.9s, 3 completed, 3 skipped]\nWarning message:\npackage 'palmerpenguins' was built under R version 4.5.1 \n```\n\n\n:::\n:::\n\n\n\nDo you notice in your console how the only objects that changed are the downstream dependencies of `fit_model()`? All other objects that are not related were not affected. This can save an immense amount of headache! Let's go ahead and look at the visual again and try re-running everything\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntar_visnetwork() # visualizing network\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"visNetwork html-widget html-fill-item\" id=\"htmlwidget-f33fb4cc57f1912f6abc\" style=\"width:100%;height:464px;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-f33fb4cc57f1912f6abc\">{\"x\":{\"nodes\":{\"name\":[\"clean_data\",\"coefs\",\"data\",\"data_c\",\"fit_model\",\"model\",\"model_coefs\",\"model_r2\",\"plot\",\"plot_data\",\"pull_data\",\"r2\"],\"type\":[\"function\",\"stem\",\"stem\",\"stem\",\"function\",\"stem\",\"function\",\"function\",\"stem\",\"function\",\"function\",\"stem\"],\"description\":[null,null,null,null,null,null,null,null,null,null,null,null],\"status\":[\"uptodate\",\"uptodate\",\"uptodate\",\"uptodate\",\"uptodate\",\"uptodate\",\"uptodate\",\"uptodate\",\"uptodate\",\"uptodate\",\"uptodate\",\"uptodate\"],\"seconds\":[null,0,0.5600000000000001,0.06,null,0,null,null,0.01,null,null,0],\"bytes\":[null,402,2915,2279,null,20852,null,null,132513,null,null,54],\"branches\":[null,null,null,null,null,null,null,null,null,null,null,null],\"label\":[\"clean_data\",\"coefs\",\"data\",\"data_c\",\"fit_model\",\"model\",\"model_coefs\",\"model_r2\",\"plot\",\"plot_data\",\"pull_data\",\"r2\"],\"color\":[\"#354823\",\"#354823\",\"#354823\",\"#354823\",\"#354823\",\"#354823\",\"#354823\",\"#354823\",\"#354823\",\"#354823\",\"#354823\",\"#354823\"],\"id\":[\"clean_data\",\"coefs\",\"data\",\"data_c\",\"fit_model\",\"model\",\"model_coefs\",\"model_r2\",\"plot\",\"plot_data\",\"pull_data\",\"r2\"],\"level\":[1,5,2,3,1,4,1,1,4,1,1,5],\"shape\":[\"triangle\",\"dot\",\"dot\",\"dot\",\"triangle\",\"dot\",\"triangle\",\"triangle\",\"dot\",\"triangle\",\"triangle\",\"dot\"]},\"edges\":{\"from\":[\"model\",\"model_coefs\",\"pull_data\",\"clean_data\",\"data\",\"data_c\",\"fit_model\",\"data_c\",\"plot_data\",\"model_r2\",\"model\"],\"to\":[\"coefs\",\"coefs\",\"data\",\"data_c\",\"data_c\",\"model\",\"model\",\"plot\",\"plot\",\"r2\",\"r2\"],\"color\":[\"#354823\",\"#354823\",\"#354823\",\"#354823\",\"#354823\",\"#354823\",\"#354823\",\"#354823\",\"#354823\",\"#354823\",\"#354823\"],\"arrows\":[\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\"]},\"nodesToDataframe\":true,\"edgesToDataframe\":true,\"options\":{\"width\":\"100%\",\"height\":\"100%\",\"nodes\":{\"shape\":\"dot\",\"physics\":false},\"manipulation\":{\"enabled\":false},\"edges\":{\"smooth\":{\"type\":\"cubicBezier\",\"forceDirection\":\"horizontal\"}},\"physics\":{\"stabilization\":false},\"interaction\":{\"zoomSpeed\":1},\"layout\":{\"hierarchical\":{\"enabled\":true,\"levelSeparation\":180,\"direction\":\"LR\"}}},\"groups\":null,\"width\":null,\"height\":null,\"idselection\":{\"enabled\":false,\"style\":\"width: 150px; height: 26px\",\"useLabels\":true,\"main\":\"Select by id\"},\"byselection\":{\"enabled\":false,\"style\":\"width: 150px; height: 26px\",\"multiple\":false,\"hideColor\":\"rgba(200,200,200,0.5)\",\"highlight\":false},\"main\":{\"text\":\"\",\"style\":\"font-family:Georgia, Times New Roman, Times, serif;font-weight:bold;font-size:20px;text-align:center;\"},\"submain\":null,\"footer\":null,\"background\":\"rgba(0, 0, 0, 0)\",\"highlight\":{\"enabled\":true,\"hoverNearest\":false,\"degree\":{\"from\":1,\"to\":1},\"algorithm\":\"hierarchical\",\"hideColor\":\"rgba(200,200,200,0.5)\",\"labelOnly\":true},\"collapse\":{\"enabled\":true,\"fit\":false,\"resetHighlight\":true,\"clusterOptions\":null,\"keepCoord\":true,\"labelSuffix\":\"(cluster)\"},\"legend\":{\"width\":0.2,\"useGroups\":false,\"position\":\"right\",\"ncol\":1,\"stepX\":100,\"stepY\":100,\"zoom\":true,\"nodes\":{\"label\":[\"Up to date\",\"Function\",\"Stem\"],\"color\":[\"#354823\",\"#899DA4\",\"#899DA4\"],\"shape\":[\"dot\",\"triangle\",\"dot\"]},\"nodesToDataframe\":true},\"tooltipStay\":300,\"tooltipStyle\":\"position: fixed;visibility:hidden;padding: 5px;white-space: nowrap;font-family: verdana;font-size:14px;font-color:#000000;background-color: #f5f4ed;-moz-border-radius: 3px;-webkit-border-radius: 3px;border-radius: 3px;border: 1px solid #808074;box-shadow: 3px 3px 10px rgba(0, 0, 0, 0.2);\"},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n:::\n\n```{.r .cell-code}\ntar_make() # re-running pipeline\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n✔ skipped pipeline [61ms, 6 skipped]\n```\n\n\n:::\n:::\n\n\n\nThe network is all up to date and all 6 targets in the pipeline were skipped.\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../site_libs/htmltools-fill-0.5.8.1/fill.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/htmlwidgets-1.6.4/htmlwidgets.js\"></script>\n<link href=\"../../site_libs/vis-9.1.0/vis-network.min.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/vis-9.1.0/vis-network.min.js\"></script>\n<script src=\"../../site_libs/visNetwork-binding-2.1.2/visNetwork.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}